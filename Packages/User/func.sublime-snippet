<snippet>
    <content><![CDATA[

/* Pass an array of size 3 in the extendgcd() funtion */
// void extendgcd(ll a,ll b,ll* v){if(b==0){v[0]=1;v[1]=0;v[2]=a;return;}extendgcd(b,a%b,v);ll x=v[1];v[1]=v[0]-v[1]*(a/b);v[0]=x;return;}
// ll msb(ll n){ll r=0;rep(i,0,32){if((1ll<<i)==n) return(i+1);if(((1ll<<i)&n)==(1ll<<i)){if(n==i)r=i;else r=i+1;}} return(r+1);}
// ll aot(ll x1,ll y1,ll x2,ll y2,ll x3,ll y3){return abs(x1*y2+x2*y3+x3*y1-x2*y1-x3*y2-x1*y3);} // 2*(Area of triangle)
// ll mex(vector<ll> &v){set<ll> s;for(auto x:v)s.insert(x);ll r=0;for(auto it:s){if(it!=r)return r;++r;}return r;}
// ll phi(ll n){ll r=n;for(ll i=2;i*i<=n;i++){if(n%i==0){while(n%i==0)n/=i;r-=r/i;}}if(n > 1)r-=r/n;return r;} //O(sqrt(N))
// ll gcd(ll a,ll b) {if(a>b) swap(a,b);if(a==0) return 0;if(b%a) return gcd(a,b-a);return a;}
// ll lcm(ll a,ll b) {return (a/gcd(a,b)*b);}
// ll binexp(ll a,ll b,ll mod) {ll r=1;while(b){if(b&1) r=(r*1LL*a)%mod;a=(a*1LL*a)%mod;b=b>>1;} return r;}
// ll mminv(ll a,ll b) {ll arr[3];extendgcd(a,b,arr);return arr[0];}    // For non prime b
// ll mminvprime(ll n,ll mod) {return binexp(n,mod-2,mod);}
// ll mod_add(ll a, ll b, ll m) {a = a%m; b = b%m; return (((a + b) % m) + m)%m;}
// ll mod_mul(ll a, ll b, ll m) {a = a%m; b = b%m; return (((a * b) % m) + m)%m;}
// ll mod_sub(ll a, ll b, ll m) {a = a%m; b = b%m; return (((a - b) % m) + m)%m;}
// ll mod_div(ll a, ll b, ll m) {a = a%m; b = b%m; return (mod_mul(a,mminvprime(b,m),m)+m)%m;} // Only for prime m
// ll getRandomNumber(ll l, ll r) {return uniform_int_distribution<ll>(l, r)(rng);}
// string to_binary(ll n){string s;while(n){s += to_string(n%2);n/=2;}reverse(all(s));return s;}
// char to_lower(char c){if(c>=97) return c;return c+32;}
// char to_upper(char c){if(c<97) return c;return c-32;}
// bool isPowerOf2(ll x){return x && (!(x&(x-1)));}
// bool isPalindromeV(vector<ll> &v){ll n=sz(v);rep(i,0,n/2){if(v[i]!=v[n-i-1]) return false;}return true;}
// bool isPalindromeS(string &v){ll n=sz(v);rep(i,0,n/2){if(v[i]!=v[n-i-1]) return false;}return true;}
// bool isSorted(vector<ll> &v) {rep(i,0,sz(v)-1) {if(v[i]>v[i+1]) return false;}return true;}
// bool isPrime(ll n) {if(n<=1) return false; for(ll i=2;i*i<n;++i) {if(n%i==0) return false;} return true;}
// vector<ll> sieve(int n){int*a=new int[n+1]();vector<ll>v;for(int i=2;i<=n;i++)if(a[i]==0){v.push_back(i);for(int j=2*i;j<=n;j+=i)a[j]=1;}return v;}

]]></content>
    <tabTrigger>func</tabTrigger>
</snippet>